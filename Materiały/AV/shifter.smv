MODULE shift(left_bit,right_bit,control)
	VAR
		value: boolean;
	ASSIGN
		next(value):= 
					case
						control = left_shift  : left_bit;
						control = right_shift : right_bit;
						TRUE                    : value;
					esac;
MODULE main
	VAR
		control: {left_shift, right_shift, both, none};
		bit0 : shift(bit1.value,FALSE,control);
		bit1 : shift(bit2.value,bit0.value,control); 
		bit2 : shift(bit3.value,bit1.value,control);
		bit3 : shift(FALSE,bit2.value,control);

--We need to check every possible situation. When shifting left (right), bit x always should be equal to previous(if it exist) bit x+1 (x-1), except, when it is last (first) bit - then it should be always equal to 0
--To check previous bit, we will use syntax (bity.value -> AX bitx.value) & (!bity.value -> AX !bitx.value) - if value of bit y is true, then next value of bit x had to be true, and if if value of bit y is false, then next value of bit x had to be false 
--We will not think about first moment, because we didn't assume anything about beginning, so in comment to every specification i assume, that there is always "previous" situation

--SHIFT RIGHT

--bit 0 should be always equal to 0 when shifting right
SPEC AG (control = right_shift -> AX !bit0.value)
--bit 1 should be equal to previous bit 0 when shifting right
SPEC AG (control = right_shift -> ((bit0.value -> AX bit1.value) & (!bit0.value -> AX !bit1.value)))
-- bit 2 should be equal to previous bit 1 when shifting right
SPEC AG (control = right_shift -> ((bit1.value -> AX bit2.value) & (!bit1.value -> AX !bit2.value)))
-- bit 3 should be equal to previous bit 2 when shifting right
SPEC AG (control = right_shift -> ((bit2.value -> AX bit3.value) & (!bit2.value -> AX !bit3.value)))

--SHIFT LEFT

--bit 0 should be equal to previous bit 1 when shifting left
SPEC AG (control = left_shift -> ((bit1.value -> AX bit0.value) & (!bit1.value -> AX !bit0.value)))
--bit 1 should be equal to previous bit 2 when shifting left
SPEC AG (control = left_shift -> ((bit2.value -> AX bit1.value) & (!bit2.value -> AX !bit1.value)))
--bit 2 should be equal to previous bit 3 when shifting left
SPEC AG (control = left_shift -> ((bit3.value -> AX bit2.value) & (!bit3.value -> AX !bit2.value)))
--bit 3 should be always equal to 0 when shifting left
SPEC AG (control = left_shift -> AX !bit3.value)

--BOTH ASSERT OR NONE ASSERT

--If both control signal are assert, then shifter should leave number without any changes
SPEC AG ((control = both | control = none) -> ((bit0.value -> AX bit0.value) & (!bit0.value -> AX !bit0.value)))
SPEC AG ((control = both | control = none) -> ((bit1.value -> AX bit1.value) & (!bit1.value -> AX !bit1.value)))
SPEC AG ((control = both | control = none) -> ((bit2.value -> AX bit2.value) & (!bit2.value -> AX !bit2.value))) 
SPEC AG ((control = both | control = none) -> ((bit3.value -> AX bit3.value) & (!bit3.value -> AX !bit3.value)))

--Why it is sufficient? So it describes how shifter should behave in every moment, in every bit, so it should be enough to verify 